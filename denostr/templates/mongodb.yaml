# # Source: mongodb/templates/serviceaccount.yaml
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: denostr-db-mongodb
#   namespace: {{ .Release.Namespace }}
#   labels:
#     app.kubernetes.io/name: mongodb
#     helm.sh/chart: mongodb-13.8.1
#     app.kubernetes.io/instance: denostr-db-mongodb
#     app.kubernetes.io/managed-by: Helm
# secrets:
#   - name: denostr-db-mongodb
# automountServiceAccountToken: true
# ---
# # Source: mongodb/templates/secrets.yaml
# apiVersion: v1
# kind: Secret
# metadata:
#   name: denostr-db-mongodb
#   namespace: {{ .Release.Namespace }}
#   labels:
#     app.kubernetes.io/name: mongodb
#     helm.sh/chart: mongodb-13.8.1
#     app.kubernetes.io/instance: denostr-db-mongodb
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: mongodb
# type: Opaque
# data:
#   mongodb-root-password: {{ randAlphaNum 16 | b64enc }}
# ---
# # Source: mongodb/templates/common-scripts-cm.yaml
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: denostr-db-mongodb-common-scripts
#   namespace: {{ .Release.Namespace }}
#   labels:
#     app.kubernetes.io/name: mongodb
#     helm.sh/chart: mongodb-13.8.1
#     app.kubernetes.io/instance: denostr-db-mongodb
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: mongodb
# data:
#   startup-probe.sh: |
#     #!/bin/bash
#     mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
#   readiness-probe.sh: |
#     #!/bin/bash
#     # Run the proper check depending on the version
#     [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
#     . /opt/bitnami/scripts/libversion.sh
#     VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
#     VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
#     VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
#     if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
#         mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
#     else
#         mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep 'true'
#     fi
#   ping-mongodb.sh: |
#     #!/bin/bash
#     mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
# ---
# # Source: mongodb/templates/standalone/pvc.yaml
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: denostr-db-mongodb
#   namespace: {{ .Release.Namespace }}
#   labels:
#     app.kubernetes.io/name: mongodb
#     helm.sh/chart: mongodb-13.8.1
#     app.kubernetes.io/instance: denostr-db-mongodb
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: mongodb
# spec:
#   accessModes:
#     - "ReadWriteOnce"
#   resources:
#     requests:
#       storage: "8Gi"
# ---
# # Source: mongodb/templates/standalone/svc.yaml
# apiVersion: v1
# kind: Service
# metadata:
#   name: denostr-db-mongodb
#   namespace: {{ .Release.Namespace }}
#   labels:
#     app.kubernetes.io/name: mongodb
#     helm.sh/chart: mongodb-13.8.1
#     app.kubernetes.io/instance: denostr-db-mongodb
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: mongodb
# spec:
#   type: ClusterIP
#   sessionAffinity: None
#   ports:
#     - name: "mongodb"
#       port: 27017
#       targetPort: mongodb
#       nodePort: null
#   selector:
#     app.kubernetes.io/name: mongodb
#     app.kubernetes.io/instance: denostr-db-mongodb
#     app.kubernetes.io/component: mongodb
# ---
# # Source: mongodb/templates/standalone/dep-sts.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: denostr-db-mongodb
#   namespace: {{ .Release.Namespace }}
#   labels:
#     app.kubernetes.io/name: mongodb
#     helm.sh/chart: mongodb-13.8.1
#     app.kubernetes.io/instance: denostr-db-mongodb
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: mongodb
# spec:
#   replicas: 1
#   strategy:
#     type: RollingUpdate
#   selector:
#     matchLabels:
#       app.kubernetes.io/name: mongodb
#       app.kubernetes.io/instance: denostr-db-mongodb
#       app.kubernetes.io/component: mongodb
#   template:
#     metadata:
#       labels:
#         app.kubernetes.io/name: mongodb
#         helm.sh/chart: mongodb-13.8.1
#         app.kubernetes.io/instance: denostr-db-mongodb
#         app.kubernetes.io/managed-by: Helm
#         app.kubernetes.io/component: mongodb
#     spec:
      
#       serviceAccountName: denostr-db-mongodb
#       affinity:
#         podAffinity:
          
#         podAntiAffinity:
#           preferredDuringSchedulingIgnoredDuringExecution:
#             - podAffinityTerm:
#                 labelSelector:
#                   matchLabels:
#                     app.kubernetes.io/name: mongodb
#                     app.kubernetes.io/instance: denostr-db-mongodb
#                     app.kubernetes.io/component: mongodb
#                 topologyKey: kubernetes.io/hostname
#               weight: 1
          
#       securityContext:
#         fsGroup: 1001
#         sysctls: []
      
#       containers:
#         - name: mongodb
#           image: docker.io/bitnami/mongodb:6.0.4-debian-11-r10
#           imagePullPolicy: "IfNotPresent"
#           securityContext:
#             runAsNonRoot: true
#             runAsUser: 1001
#           env:
#             - name: BITNAMI_DEBUG
#               value: "false"
#             - name: MONGODB_ROOT_USER
#               value: "root"
#             - name: MONGODB_ROOT_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: denostr-db-mongodb
#                   key: mongodb-root-password
#             - name: ALLOW_EMPTY_PASSWORD
#               value: "no"
#             - name: MONGODB_SYSTEM_LOG_VERBOSITY
#               value: "0"
#             - name: MONGODB_DISABLE_SYSTEM_LOG
#               value: "no"
#             - name: MONGODB_DISABLE_JAVASCRIPT
#               value: "no"
#             - name: MONGODB_ENABLE_JOURNAL
#               value: "yes"
#             - name: MONGODB_PORT_NUMBER
#               value: "27017"
#             - name: MONGODB_ENABLE_IPV6
#               value: "no"
#             - name: MONGODB_ENABLE_DIRECTORY_PER_DB
#               value: "no"
#           ports:
#             - name: mongodb
#               containerPort: 27017
#           livenessProbe:
#             failureThreshold: 6
#             initialDelaySeconds: 30
#             periodSeconds: 20
#             successThreshold: 1
#             timeoutSeconds: 10
#             exec:
#               command:
#                 - /bitnami/scripts/ping-mongodb.sh
#           readinessProbe:
#             failureThreshold: 6
#             initialDelaySeconds: 5
#             periodSeconds: 10
#             successThreshold: 1
#             timeoutSeconds: 5
#             exec:
#               command:
#                 - /bitnami/scripts/readiness-probe.sh
#           resources:
#             limits: {}
#             requests: {}
#           volumeMounts:
#             - name: datadir
#               mountPath: /bitnami/mongodb
#               subPath: 
#             - name: common-scripts
#               mountPath: /bitnami/scripts
#       volumes:
#         - name: common-scripts
#           configMap:
#             name: denostr-db-mongodb-common-scripts
#             defaultMode: 0550
#         - name: datadir
#           persistentVolumeClaim:
#             claimName: denostr-db-mongodb


# Source: mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: denostr-mongodb
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.9.4
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: denostr-mongodb
automountServiceAccountToken: true
---
# Source: mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: denostr-mongodb
  namespace: denostr-{{ .Values.bfl.username }}
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.9.4
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password:  {{ randAlphaNum 16 | b64enc }}
  mongodb-replica-set-key:  {{ randAlphaNum 16 | b64enc }}
---
# Source: mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: denostr-mongodb-common-scripts
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.9.4
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: mongodb/templates/replicaset/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: denostr-mongodb-scripts
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.9.4
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  setup.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh
    . /opt/bitnami/scripts/libfs.sh
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libvalidations.sh

    if is_empty_value "$MONGODB_ADVERTISED_PORT_NUMBER"; then
      export MONGODB_ADVERTISED_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    fi

    info "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    info "Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER"

    # Check for existing replica set in case there is no data in the PVC
    # This is for cases where the PVC is lost or for MongoDB caches without
    # persistence
    current_primary=""
    if is_dir_empty "${MONGODB_DATA_DIR}/db"; then
      info "Data dir empty, checking if the replica set already exists"
      current_primary=$(mongosh admin --host "denostr-mongodb-0.denostr-mongodb-headless.denostr-{{ .Values.bfl.username }}.svc.cluster.local:27017,denostr-mongodb-1.denostr-mongodb-headless.denostr-{{ .Values.bfl.username }}.svc.cluster.local:27017" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand("ismaster")' | awk -F\' '/primary/ {print $2}')

      if ! is_empty_value "$current_primary"; then
        info "Detected existing primary: ${current_primary}"
      fi
    fi

    if ! is_empty_value "$current_primary" && [[ "$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER" == "$current_primary" ]]; then
        info "Advertised name matches current primary, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    elif ! is_empty_value "$current_primary" && [[ "$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER" != "$current_primary" ]]; then
        info "Current primary is different from this node. Configuring the node as replica of ${current_primary}"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_HOST="${current_primary%:*}"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="${current_primary#*:}"
        export MONGODB_SET_SECONDARY_OK="yes"
    elif [[ "$MY_POD_NAME" = "denostr-mongodb-0" ]]; then
        info "Pod name matches initial primary pod name, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    else
        info "Pod name doesn't match initial primary pod name, configuring node as a secondary"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    fi

    if [[ "$MONGODB_REPLICA_SET_MODE" == "secondary" ]]; then
        export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
        export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
        export MONGODB_ROOT_PASSWORD=""
        export MONGODB_EXTRA_USERNAMES=""
        export MONGODB_EXTRA_DATABASES=""
        export MONGODB_EXTRA_PASSWORDS=""
        export MONGODB_ROOT_PASSWORD_FILE=""
        export MONGODB_EXTRA_USERNAMES_FILE=""
        export MONGODB_EXTRA_DATABASES_FILE=""
        export MONGODB_EXTRA_PASSWORDS_FILE=""
    fi

    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
  setup-hidden.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh

    echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    echo "Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER"
    echo "Configuring node as a hidden node"
    export MONGODB_REPLICA_SET_MODE="hidden"
    export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    export MONGODB_ROOT_PASSWORD=""
    export MONGODB_EXTRA_USERNAMES=""
    export MONGODB_EXTRA_DATABASES=""
    export MONGODB_EXTRA_PASSWORDS=""
    export MONGODB_ROOT_PASSWORD_FILE=""
    export MONGODB_EXTRA_USERNAMES_FILE=""
    export MONGODB_EXTRA_DATABASES_FILE=""
    export MONGODB_EXTRA_PASSWORDS_FILE=""
    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
---
# Source: mongodb/templates/arbiter/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: denostr-mongodb-arbiter-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.9.4
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/component: arbiter
---
# Source: mongodb/templates/replicaset/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: denostr-mongodb-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.9.4
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/component: mongodb
---
# Source: mongodb/templates/arbiter/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: denostr-mongodb-arbiter
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.9.4
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
spec:
  serviceName: denostr-mongodb-arbiter-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: denostr-mongodb
      app.kubernetes.io/component: arbiter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-13.9.4
        app.kubernetes.io/instance: denostr-mongodb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: arbiter
    spec:
      
      serviceAccountName: denostr-mongodb
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: denostr-mongodb
                    app.kubernetes.io/component: arbiter
                topologyKey: kubernetes.io/hostname
              weight: 1
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      initContainers:
      containers:
        - name: mongodb-arbiter
          image: docker.io/bitnami/mongodb:6.0.5-debian-11-r4
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 20m
              memory: 100Mi
            limits:
              cpu: 200m
              memory: 500Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "denostr-mongodb-arbiter-headless"
            - name: MONGODB_REPLICA_SET_MODE
              value: "arbiter"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: denostr-mongodb-0.denostr-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_INITIAL_PRIMARY_ROOT_USER
              value: "root"
            - name: MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: denostr-mongodb
                  key: mongodb-root-password
            - name: MONGODB_REPLICA_SET_KEY
              valueFrom:
                secretKeyRef:
                  name: denostr-mongodb
                  key: mongodb-replica-set-key
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
          ports:
            - containerPort: 27017
              name: mongodb
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: mongodb
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: mongodb
          resources:
            limits: {}
            requests: {}
---
# Source: mongodb/templates/replicaset/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: denostr-mongodb
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.9.4
    app.kubernetes.io/instance: denostr-mongodb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  serviceName: denostr-mongodb-headless
  podManagementPolicy: OrderedReady
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: denostr-mongodb
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-13.9.4
        app.kubernetes.io/instance: denostr-mongodb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: denostr-mongodb
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: denostr-mongodb
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.5-debian-11-r4
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 500m
              memory: 500Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: K8S_SERVICE_NAME
              value: "denostr-mongodb-headless"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: denostr-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: denostr-mongodb
                  key: mongodb-root-password
            - name: MONGODB_REPLICA_SET_KEY
              valueFrom:
                secretKeyRef:
                  name: denostr-mongodb
                  key: mongodb-replica-set-key
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            
      volumes:
        - name: common-scripts
          configMap:
            name: denostr-mongodb-common-scripts
            defaultMode: 0550
        - name: scripts
          configMap:
            name: denostr-mongodb-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"