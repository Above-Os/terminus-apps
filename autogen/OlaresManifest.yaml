olaresManifest.version: '0.8.1'
olaresManifest.type: app
metadata:
  name: autogen
  icon: https://file.bttcdn.com/appstore/autogen/icon.png
  description: A programming framework for agentic AI
  appid: autogen
  title: autogen
  version: 0.0.1
  categories:
  - Productivity
entrances:
- name: test
  host: test
  port: 3010
  icon: https://file.bttcdn.com/appstore/autogen/icon.png
  title: autogen
  authLevel: private
spec:
  versionName: '0.17.3'
  fullDescription: |
    AutoGen is a framework for creating multi-agent AI applications that can act autonomously or work alongside humans.

    Why Use AutoGen?
    The AutoGen ecosystem provides everything you need to create AI agents, especially multi-agent workflows -- framework, developer tools, and applications.

    The framework uses a layered and extensible design. Layers have clearly divided responsibilities and build on top of layers below. This design enables you to use the framework at different levels of abstraction, from high-level APIs to low-level components.

    - Core API implements message passing, event-driven agents, and local and distributed runtime for flexibility and power. It also support cross-language support for .NET and Python.
    - AgentChat API implements a simpler but opinionated API rapid for prototyping. This API is built on top of the Core API and is closest to what users of v0.2 are familiar with and supports familiar multi-agent patterns such as two-agent chat or group chats.
    - Extensions API enables first- and third-party extensions continuously expanding framework capabilities. It support specific implementation of LLM clients (e.g., OpenAI, AzureOpenAI), and capabilities such as code execution.

    The ecosystem also supports two essential developer tools:
    - AutoGen Studio provides a no-code GUI for building multi-agent applications.
    - AutoGen Bench provides a benchmarking suite for evaluating agent performance.

    You can use the AutoGen framework and developer tools to create applications for your domain. For example, Magentic-One is a state-of-art multi-agent team built using AgentChat API and Extensions API that can handle variety of tasks that require web browsing, code execution, and file handling.

  developer: Microsoft
  website: https://microsoft.github.io/autogen/stable/
  sourceCode: https://github.com/microsoft/autogen
  submitter: Olares
  language:
  - en
  doc: https://microsoft.github.io/autogen/stable/user-guide/core-user-guide/index.html
  license:
  - text: MIT
    url: https://github.com/microsoft/autogen?tab=MIT-2-ov-file
